# 워크플로우 이름 정의
name: CI/CD

# 워크플로우 트리거 조건
on:
  push:
    branches:
      - "main"
      - "develop"
  pull_request:
    branches:
      - "main"
      - "develop"

# 전역 환경 변수 설정
env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  DOCKER_BUILDKIT: "1"

# 실행될 작업들
jobs:
  # 빌드 작업
  build:
    runs-on: ubuntu-latest
    steps:
      # 소스 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: 'gradle' # Gradle 캐시 활성화로 빌드 속도 향상

      # Gradle Wrapper에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle 빌드 실행 (테스트 제외)
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # 빌드된 JAR 파일을 아티팩트로 저장
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build/libs/*.jar
          retention-days: 7

  # 테스트 작업
  test:
    needs: build  # 빌드 작업이 성공적으로 완료된 후에 실행
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: 'gradle'

      # 이전 빌드 작업에서 생성된 JAR 파일 다운로드
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: build/libs

      # Gradle Wrapper에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 테스트 실행
      - name: Run tests
        run: ./gradlew test

      # 테스트 결과를 아티팩트로 저장
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()  # 테스트 실패 시에도 결과 저장
        with:
          name: test-results
          path: |
            build/reports/tests/test/
            build/test-results/test/
          retention-days: 7

  # 배포 작업
  deploy:
    needs: [build, test]  # 빌드와 테스트가 모두 성공적으로 완료된 후에 실행
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 빌드된 JAR 파일 다운로드
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: build/libs

      - name: Set image tag
        run: echo "IMAGE_TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

      # AWS 접근을 위한 인증 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2  # AWS 서울 리전

      # Amazon ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          DOCKER_BUILDKIT: "1"
        run: |
          docker build --platform linux/arm64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v2
        with:
          task-definition: .aws/task-definition.json
          container-name: ${{ secrets.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true